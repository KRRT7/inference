import json
import os
import re
from collections import defaultdict
from typing import Dict, List, Set, Tuple, Type
import inspect
from jinja2 import Environment, FileSystemLoader

from inference.core.utils.file_system import dump_text_lines, read_text_file
from inference.core.workflows.execution_engine.entities.base import OutputDefinition
from inference.core.workflows.execution_engine.entities.types import STEP_AS_SELECTED_ELEMENT
from inference.core.workflows.execution_engine.introspection.blocks_loader import (
    describe_available_blocks,
)
from inference.core.workflows.execution_engine.introspection.connections_discovery import (
    discover_blocks_connections,
)
from inference.core.workflows.execution_engine.introspection.entities import (
    SelectorDefinition, BlockDescription, BlockManifestMetadata,
)
from inference.core.workflows.execution_engine.introspection.schema_parser import (
    parse_block_manifest,
)
from inference.core.workflows.prototypes.block import WorkflowBlock

# Setup Jinja2 environment
TEMPLATES_DIR = os.path.join(os.path.dirname(__file__), "templates")
env = Environment(loader=FileSystemLoader(TEMPLATES_DIR))

DOCS_ROOT_DIR = os.path.abspath(
    os.path.join(
        os.path.dirname(__file__),
        "..",
        "..",
        "docs",
    )
)

BLOCKS_DIR = os.path.join(DOCS_ROOT_DIR, "workflows", "blocks")
KINDS_DIR = os.path.join(DOCS_ROOT_DIR, "workflows", "kinds")
AUTOGENERATED_BLOCKS_LIST_TOKEN = "<!--- AUTOGENERATED_BLOCKS_LIST -->"
AUTOGENERATED_KINDS_LIST_TOKEN = "<!--- AUTOGENERATED_KINDS_LIST -->"

INLINE_UQL_PARAMETER_PATTERN = re.compile(r"({{\s*\\$parameters\\.(\\w+)\s*}})")

def main() -> None:
    os.makedirs(BLOCKS_DIR, exist_ok=True)
    os.makedirs(KINDS_DIR, exist_ok=True)

    blocks_description = describe_available_blocks(dynamic_blocks=[])
    block_families = group_blocks_by_family(blocks_description.blocks)

    generate_blocks_documentation(block_families, blocks_description)
    generate_kinds_documentation(blocks_description.declared_kinds)

def group_blocks_by_family(blocks: List[BlockDescription]) -> Dict[str, List[BlockDescription]]:
    block_families = defaultdict(list)
    for block in blocks:
        block_families[block.human_friendly_block_name].append(block)
    for family_name in block_families:
        block_families[family_name] = sorted(
            block_families[family_name],
            key=lambda block: int(block.block_schema.get("version", "v0")[1:]),
            reverse=True,
        )
    return block_families

def generate_blocks_documentation(block_families: Dict[str, List[BlockDescription]], blocks_description):
    summary_template = env.get_template("blocks_summary.md.j2")
    family_template = env.get_template("block_family.md.j2")

    summary_data = []

    for family_name, family_members in block_families.items():
        block_types = {block.block_schema.get("block_type", "OTHER").upper() for block in family_members}
        block_licenses = {block.block_schema.get("license", "UNKNOWN").upper() for block in family_members}

        content = family_template.render(
            family_name=family_name,
            family_members=family_members,
            block_types=block_types,
            block_licenses=block_licenses,
        )

        family_file_path = os.path.join(BLOCKS_DIR, slugify_block_name(family_name) + ".md")
        with open(family_file_path, "w", encoding="utf-8") as family_file:
            family_file.write(content)

        summary_data.append({
            "family_name": family_name,
            "file_name": slugify_block_name(family_name) + ".md",
            "description": family_members[0].block_schema.get("short_description", "No description"),
        })

    summary_content = summary_template.render(block_families=summary_data)
    summary_file_path = os.path.join(BLOCKS_DIR, "SUMMARY.md")
    with open(summary_file_path, "w", encoding="utf-8") as summary_file:
        summary_file.write(summary_content)

def generate_kinds_documentation(declared_kinds: List):
    summary_template = env.get_template("kinds_summary.md.j2")
    kind_template = env.get_template("kind.md.j2")

    summary_data = []

    for declared_kind in declared_kinds:
        kind_file_path = os.path.join(KINDS_DIR, slugify_kind_name(declared_kind.name) + ".md")

        content = kind_template.render(
            kind_name=declared_kind.name,
            description=declared_kind.description or "No description available",
            serialised_data_type=declared_kind.serialised_data_type,
            internal_data_type=declared_kind.internal_data_type,
            details=declared_kind.docs or "No details available",
        )

        with open(kind_file_path, "w", encoding="utf-8") as kind_file:
            kind_file.write(content)

        summary_data.append({
            "kind_name": declared_kind.name,
            "file_name": slugify_kind_name(declared_kind.name) + ".md",
        })

    summary_content = summary_template.render(kinds=summary_data)
    summary_file_path = os.path.join(KINDS_DIR, "SUMMARY.md")
    with open(summary_file_path, "w", encoding="utf-8") as summary_file:
        summary_file.write(summary_content)

def slugify_block_name(name: str) -> str:
    name = re.sub(r"[/\\- ]+", r"", name)
    return camel_to_snake(name=name)

def slugify_kind_name(kind_name: str) -> str:
    kind_name = re.sub(r"[\\[\\] ]+", r"_", kind_name.lower())
    kind_name = camel_to_snake(name=kind_name)
    return kind_name.strip("_")

def camel_to_snake(name: str) -> str:
    name = re.sub("(.)([A-Z][a-z]+)", r"\\1_\\2", name)
    name = re.sub("([a-z0-9])([A-Z])", r"\\1_\\2", name)
    return name.lower()

if __name__ == "__main__":
    main()
